gameServer
	constructor: crea un gameRoom
	rest: get all rooms {id,type,url}
gameRoon
	constructor: crea socket, crea una game, y los hookea
	rest-like api para events: player (join,leave,chat,profile/status updates) //room
				   player actions (move attack)			   //game
	broadcast: para todo player, players update, piece update,new chat

future: la interfaz que aceptar las acciones de los jugadores deberia ir a un gameActionServer que valida y propaga los eventos a gameRoom que luego broadcaste a todos. 

board
	generacion de mapas, soportar logica de bandos, spawn locations 
game
	logica para aplicar las acciones de las piezas al board


client actions
	bind to sock
	create & send action Msg (controller pressed key + gameClient.context)
	{
	  gameRoonId
	  playerId
	  <action>
	}
	to: serverUrl+/room:id/
 
client controller:
	attach: for each key bind on(key, clientAction.func)
	detach: remove binds
future:multiple devices! (mouse & touch)

client renderer
	constructor: attach to socket (roomId) for game updates
	manage stage 
	PlayerPiece + mapRef  -> gameCamera 

future:chat/notificacions grl cross game


